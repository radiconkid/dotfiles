if has('vim_starting')
  set rtp+=~/.vim/plugged/vim-plug
  if !isdirectory(expand('~/.vim/plugged/vim-plug'))
    echo 'install vim-plug...'
    call system('mkdir -p ~/.vim/plugged/vim-plug')
    call system('git clone https://github.com/junegunn/vim-plug.git ~/.vim/plugged/vim-plug/autoload')
  end
endif

call plug#begin('~/.vim/plugged')
  Plug 'junegunn/vim-plug',
        \ {'dir': '~/.vim/plugged/vim-plug/autoload'}
  Plug 'Townk/vim-autoclose'
  Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle'] }
  Plug 'Shougo/deoplete.nvim'
  " エラーの際は :UpdateRemotePlugins
  Plug 'Shougo/unite.vim'
  Plug 'Shougo/vimfiler.vim', {}
  Plug 'Shougo/vimproc.vim', {'do' : 'make'}
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'airblade/vim-rooter'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'daniel-samson/project-tree.vim'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'evidens/vim-twig'
  Plug 'fuenor/qfixgrep'
  Plug 'iberianpig/tig-explorer.vim'
  Plug 'kana/vim-submode'
  Plug 'kassio/neoterm'
  Plug 'leafcage/yankround.vim'
  Plug 'maksimr/vim-jsbeautify'
  Plug 'mattn/emmet-vim'
  Plug 'regedarek/ZoomWin'
  Plug 'scrooloose/syntastic'
  Plug 'thinca/vim-quickrun'
  Plug 'tpope/vim-fugitive'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'vim-jp/vimdoc-ja'
  Plug 'vim-scripts/DirDiff.vim'
  Plug 'vim-scripts/EnhCommentify.vim'
  Plug 'vim-scripts/grep.vim'
" Plug 'edkolev/tmuxline.vim'
  Plug 'konpa/devicon'
  Plug 'airblade/vim-gitgutter', { 'on':  ['GitGutterEnable'] }

" Syntax
  Plug 'chr4/nginx.vim'
  Plug 'ekalinin/Dockerfile.vim'

" Themes
  Plug 'joshdick/onedark.vim'
  Plug 'AlessandroYorba/Sierra'

call plug#end()

let mapleader = "\<Space>"
set runtimepath^=$HOME/.vim
set ambiwidth=double
set shell=/bin/bash
set nocompatible
"set termguicolors
filetype on
let g:sierra_Pitch = 1
"let g:sierra_Sunset = 1
"let g:sierra_Twilight = 1
"let g:sierra_Midnight = 1
"let g:sierra_Midnight = 1
colorscheme sierra
"colorscheme onedark

if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif

" Use :help 'option' to see the documentation for the given option.
set autoindent
set complete-=i
set showmatch
set showmode
set smarttab
set cursorline

set nrformats-=octal
set shiftround

set ttimeout
set ttimeoutlen=50

set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set laststatus=2
set ruler
set showcmd
set wildmenu

set autoread

set encoding=utf-8
set fileencodings=utf-8,sjis,euc-jp,latin1
set tabstop=2 shiftwidth=2 expandtab
set listchars=tab:>\ ,trail:~
set list
" colorscheme 変更後に背景透過を継続
augroup TransparentBG
  	autocmd!
	autocmd Colorscheme * highlight Normal ctermbg=none
	autocmd Colorscheme * highlight NonText ctermbg=none
	autocmd Colorscheme * highlight LineNr ctermbg=none
	autocmd Colorscheme * highlight Folded ctermbg=none
	autocmd Colorscheme * highlight EndOfBuffer ctermbg=none 
augroup END

inoremap <C-U> <C-G>u<C-U>

set number
set hlsearch
set ignorecase
set smartcase

" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" do not history when leavy buffer
set hidden
set history=1000

" FIXME: (broken) ctrl s to save
noremap  <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <Esc>:update<CR>

set undofile
set undodir=$HOME/.vimbackup
set backup
set backupdir=$HOME/.vimbackup
let &directory = &backupdir

autocmd BufWritePre,FileWritePre,FileAppendPre * call UpdateBackupFile()
function! UpdateBackupFile()
    let basedir = "$HOME/.vimbackup"
    let dir = strftime(basedir."/%Y%m/%d", localtime())
    if !isdirectory(dir)
        let retval = system("mkdir -p ".dir)
        let retval = system("chown username:groupname ".dir)
    endif
    exe "set backupdir=".dir
    let time = strftime("%H_%M_%S", localtime())
    exe "set backupext=.".time
endfunction

set swapfile
set fileformats=unix,dos,mac

" exit insert mode 
inoremap <C-c> <Esc>

set completeopt=menuone,longest,preview

"
" Plugins config
"

" CtrlP
set wildignore+=*/.git/*,*/.hg/*,*/.svn/* 

" Ultisnip
" NOTE: <f1> otherwise it overrides <tab> forever
let g:UltiSnipsExpandTrigger="<f1>"
let g:UltiSnipsJumpForwardTrigger="<f1>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:did_UltiSnips_vim_after = 1

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='minimalist'

"
" Basic shortcuts definitions
"  most in visual mode / selection (v or ⇧ v)
"

" Find
map <C-f> /
" indend / deindent after selecting the text with (⇧ v), (.) to repeat.
vnoremap <Tab> >
vnoremap <S-Tab> <
" comment / decomment & normal comment behavior
vmap <C-m> gc
" Disable tComment to escape some entities
let g:tcomment#replacements_xml={}
" Text wrap simpler, then type the open tag or ',"
vmap <C-w> S
" Cut, Paste, Copy
vmap <C-x> d
vmap <C-v> p
vmap <C-c> y
" Undo, Redo (broken)
nnoremap <C-z>  :undo<CR>
inoremap <C-z>  <Esc>:undo<CR>
nnoremap <C-y>  :redo<CR>
inoremap <C-y>  <Esc>:redo<CR>


"grとコマンドすると:Rgrepが起動するようにしています。
nnoremap <expr> gr ':Rgrep<CR>'
let Grep_Skip_Dirs = '.svn .git node_modules'  "無視するディレクトリ
let Grep_Default_Options = '-I'   "バイナルファイルがgrepしない
let Grep_Skip_Files = '*.bak *~'  "バックアップファイルを無視する

" VimGrep時の操作関連
nnoremap [q :cprevious<CR>   " 前へ
nnoremap ]q :cnext<CR>       " 次へ
nnoremap [Q :<C-u>cfirst<CR> " 最初へ
nnoremap ]Q :<C-u>clast<CR>  " 最後へ

"emmet の補完を<TAB>に変更
let g:user_emmet_expandabbr_key = '<Tab>'

let $PYTHONPATH='/usr/lib/python3.4/site-packages'
highlight Normal ctermbg=none

" vimfiler -------------------------------
" F2 でツリーを表示する
nnoremap <F2> :VimFiler -split -simple -winwidth=20 -no-quit<Cr>

autocmd! FileType vimfiler call My_vimfiler_settings()
function! My_vimfiler_settings()
  nmap     <buffer><expr><Cr> vimfiler#smart_cursor_map("\<Plug>(vimfiler_expand_tree)", "\<Plug>(vimfiler_edit_file)")
  nnoremap <buffer>s          :call vimfiler#mappings#do_action('my_split')<Cr>
  nnoremap <buffer>v          :call vimfiler#mappings#do_action('my_vsplit')<Cr>
endfunction

let s:my_action = { 'is_selectable' : 1 }
function! s:my_action.func(candidates)
  wincmd p
  exec 'split '. a:candidates[0].action__path
endfunction
call unite#custom_action('file', 'my_split', s:my_action)

let s:my_action = { 'is_selectable' : 1 }                     
function! s:my_action.func(candidates)
  wincmd p
  exec 'vsplit '. a:candidates[0].action__path
endfunction
call unite#custom_action('file', 'my_vsplit', s:my_action)

" Unite
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> ,uh :<C-u>Unite history/unite<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>

" デフォルトのファイラを vimfiler にする。(設定なしだとNERDtree)
let g:vimfiler_as_default_explorer=1

" セーフモード解除
call vimfiler#custom#profile('default', 'context', { 'safe' : 0, })



"------------------------------------------------
" CSVのハイライト表示
" @see http://www.vim.org/tips/tip.php?tip_id=667
"------------------------------------------------
" csv の特定のカラムをハイライト (put in .vimrc)
" 使い方↓↓
" :Csv 5                            : 5番めのカラムをハイライト
function! CSVH(x)
    execute 'match Keyword /^\([^,]*,\)\{'.a:x.'}\zs[^,]*/'
    execute 'normal ^'.a:x.'f,'
endfunction
command! -nargs=1 Csv :call CSVH(<args>)

"-----------------------------
" カラム名からIndex値を取得する
"-----------------------------
function! CsvCol2Index(colName)
    ruby << EOF
    colName = VIM::evaluate("a:colName")
    columns = eval("[" + VIM::Buffer.current.line + "]")
    colIndex = columns.index(colName)
    colIndex = -1 unless colIndex
    VIM::command("return '" + colIndex.to_s + "'")
EOF
endfunction

"------------------------------------------------
"選択中のCSVカラムをハイライトする
"------------------------------------------------
function! SelectCsvH()
    "最後のヤンクを保管しておく
    let tmp = @"
    "現在選択中のテキストを取得する
    normal! gv"ty
    "取得した結果を変数に格納する
    let seltext=@t
    let columnNumber = CsvCol2Index(seltext)
    if columnNumber >= 0
        let result = CSVH(columnNumber)
    else
        echo "対象のカラムは存在しません"
    endif
    "最後のヤンクを書き戻す
    let @" = tmp
    let @/ = seltext
endfunction

" 選択中のCSVカラム名の列をハイライト表示する
vmap <silent> ,hc :call SelectCsvH()<CR>

command! -range=% -nargs=* BeautifyHTML <line1>,<line2>call RangeHtmlBeautify()
command! -range=% -nargs=* BeautifyJS <line1>,<line2>call RangeJsBeautify()
command! -range=% -nargs=* BeautifyCSS <line1>,<line2>call RangeCSSBeautify()
command! -range=% -nargs=* BeautifyJSON <line1>,<line2>call RangeJsonBeautify()

source $HOME/.vim/scripts/XmlMinify.vim
command! -range=% -nargs=* Minify <line1>,<line2>call XmlMinify()

if has('nvim')
    " neovim 限定の設定
    tnoremap <silent> <ESC> <C-\><C-n>
endif
let g:deoplete#enable_at_startup = 1
map <Space> :tabn<CR>
map <S-Space> :tabp<CR>
map <Left> :tabp<CR>
map <Right> :tabn<CR>
" バッファを使わない
"autocmd BufReadPost * tab ball

" Bookmark
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
    nmap mm :BookmarkToggle<CR>
    nmap mi :BookmarkAnnotate<CR>
    nmap mn :BookmarkNext<CR>
    nmap mp :BookmarkPrev<CR>
    nmap ma :BookmarkShowAll<CR>
    nmap mc :BookmarkClear<CR>
    nmap mx :BookmarkClearAll<CR>
    nmap mkk :BookmarkMoveUp
    nmap mjj :BookmarkMoveDown
endfunction
function! BookmarkUnmapKeys()
    unmap mm
    unmap mi
    unmap mn
    unmap mp
    unmap ma
    unmap mc
    unmap mx
    unmap mkk
    unmap mjj
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()
"let g:bookmark_sign  = ⚑	" ブックマークアイコン設定（⚑）
"let g:bookmark_annotation_sign  = ☰	" ブックマークのメモアイコン設定（☰）
"let g:bookmark_save_per_working_dir  = 1	" ブックマークをディレクトリ毎に保存するかどうか？（０）
let g:bookmark_auto_save  = 1	" ブックマーク自動保存（１）
let g:bookmark_manage_per_buffer  = 1	" バッファを移動したときにブックマークを保存し、他のバッファに入ったときにブックマークを読み込む（０）
"let g:bookmark_auto_save_file  = $HOME .'/.vim-bookmarks'	" 保存先ファイルの設定（$HOME .’/.vim-bookmarks’）
let g:bookmark_auto_close  = 0	" ブックマークへ移動するときにロケーションウィンドウを閉じるかどうか（０）
let g:bookmark_highlight_lines  = 0	" ブックマークしているラインのハイライトの有無（０）
let g:bookmark_show_warning  = 1	" ブックマークを削除するときWarningを出すかどうか（１）
let g:bookmark_show_toggle_warning  = 1	" ブックマークのメモを削除するときWarningを出すかどうか（１）
let g:bookmark_center  = 1	" ブックマークに移動のするときそのラインをウィンドウの中心にもってくるかどうか（０）
let g:bookmark_no_default_key_mappings  = 0	" 初期のキーマッピングを行うかどうか（０）
let g:bookmark_location_list  = 0	" 全てのブックマーク表示にロケーションリストをつかうかどうか（０）
let g:bookmark_disable_ctrlp  = 1	" 全てのブックマーク表示にctrlpインターフェイスを利用しない（０）

" カーソル行をハイライト
  set cursorline
  " カレントウィンドウにのみ罫線を引く
  augroup cch
    autocmd! cch
    autocmd WinLeave * set nocursorline
    autocmd WinEnter,BufRead * set cursorline
  augroup END

:hi clear CursorLine
:hi CursorLine gui=underline
highlight CursorLine ctermbg=black guibg=black

" カーソル位置を記憶
if has("autocmd")
  augroup redhat
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
  augroup END
endif


" オリジナルキーマップ
nmap nw :set nowrap<CR>
nmap wr :set wrap<CR>
nmap vs :vsplit<CR>
nmap ss :split<CR>

" ;でコマンド入力( ;と:を入れ替)
"noremap ; :
"noremap : ;

"---------------------------------------------------------------------------
" CTRL-hjklでウィンドウ移動
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

nnoremap <C-Tab> gt
nnoremap <C-S-Tab> gT

call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')

" ファイル拡張子関連付

au BufRead,BufNewFile *.ect  setf html
au BufRead,BufNewFile *.py   setf python
au BufRead,BufNewFile *.php  setf php
au BufRead,BufNewFile *.twig setf twig
au BufRead,BufNewFile *.twi  setf twig

"##### auto fcitx  ###########
let g:input_toggle = 1
function! Fcitx2en()
   let s:input_status = system("fcitx-remote")
   if s:input_status == 2
      let g:input_toggle = 1
      let l:a = system("fcitx-remote -c")
   endif
endfunction

set ttimeoutlen=150
"Leave Insert mode
autocmd InsertLeave * call Fcitx2en()
"##### auto fcitx end ######
let g:python2_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'
set gfn=Osaka-Mono:h18

nnoremap s <Nop>
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
nnoremap sn gt
nnoremap sp gT
nnoremap sr <C-w>r
nnoremap s= <C-w>=
nnoremap sw <C-w>w
nnoremap so <C-w>_<C-w>|
nnoremap sO <C-w>=
nnoremap sN :<C-u>bn<CR>
nnoremap sP :<C-u>bp<CR>
nnoremap st :<C-u>tabnew<CR>
nnoremap sT :<C-u>Unite tab<CR>
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>

call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')

" yankround
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
nnoremap <leader>y :<C-u>Unite yankround<CR>

""起動時に有効
"let g:neocomplete#enable_at_startup = 1
"" ポップアップメニューで表示される候補の数
"let g:neocomplete#max_list = 50
""キーワードの長さ、デフォルトで80
"let g:neocomplete#max_keyword_width = 80
"let g:neocomplete#enable_ignore_case = 1
"highlight Pmenu ctermbg=6
"highlight PmenuSel ctermbg=3
"highlight PMenuSbar ctermbg=0
"inoremap <expr><CR>  pumvisible() ? neocomplete#close_popup() : "<CR>"

set updatetime=250
highlight GitGutterAdd ctermfg=blue
let g:gitgutter_highlight_lines = 1

" open tig with current file
nnoremap <Leader>T :TigOpenCurrentFile<CR>
" open tig with Project root path
nnoremap <Leader>t :TigOpenProjectRootDir<CR>
" open tig grep
nnoremap <Leader>g :TigGrep<CR>
" resume from last grep
nnoremap <Leader>r :TigGrepResume<CR>
" open tig grep with the selected word
vnoremap <Leader>g y:TigGrep<Space><C-R>"<CR>
" open tig grep with the word under the cursor
nnoremap <Leader>cg :<C-u>:TigGrep<Space><C-R><C-W><CR>
" open tig blame with current file
nnoremap <Leader>b :TigBlame<CR>

" deoplete
let g:deoplete#enable_at_startup = 1
" <TAB>: completion.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

" <BS>: close popup and delete backword char.
inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

let g:deoplete#enable_camel_case = 1

" neoterm
if !has('nvim')
    nnoremap <silent> ,rc :TREPLSendFile<cr>
    nnoremap <silent> ,rl :TREPLSendLine<cr>
    vnoremap <silent> ,rl :TREPLSendSelection<cr>
    nnoremap <silent> vt :Ttoggle<cr>
    nnoremap <silent> vs :terminal<cr>
endif
